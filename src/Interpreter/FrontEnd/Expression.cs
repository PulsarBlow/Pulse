//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generator name    : pulse_ast
//     Generator version : 1.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pulse.Interpreter.FrontEnd
{
    internal abstract class Expression
    {
        public abstract T Accept<T>(IVisitor<T> visitor);
        
        public interface IVisitor<out T>
        {
            T VisitBinaryExpression(Binary expression);
            T VisitGroupingExpression(Grouping expression);
            T VisitLiteralExpression(Literal expression);
            T VisitUnaryExpression(Unary expression);
        }
        public sealed class Binary : Expression
        {
            public Expression Left { get; }
            public Token Operator { get; }
            public Expression Right { get; }
            
            public Binary(Expression left,Token @operator,Expression right)
            {
                Left = left;
                Operator = @operator;
                Right = right;
            }
            
            public override T Accept<T>(IVisitor<T> visitor)
                => visitor.VisitBinaryExpression(this);
        }
        public sealed class Grouping : Expression
        {
            public Expression Expression { get; }
            
            public Grouping(Expression expression)
            {
                Expression = expression;
            }
            
            public override T Accept<T>(IVisitor<T> visitor)
                => visitor.VisitGroupingExpression(this);
        }
        public sealed class Literal : Expression
        {
            public object Value { get; }
            
            public Literal(object value)
            {
                Value = value;
            }
            
            public override T Accept<T>(IVisitor<T> visitor)
                => visitor.VisitLiteralExpression(this);
        }
        public sealed class Unary : Expression
        {
            public Token Operator { get; }
            public Expression Right { get; }
            
            public Unary(Token @operator,Expression right)
            {
                Operator = @operator;
                Right = right;
            }
            
            public override T Accept<T>(IVisitor<T> visitor)
                => visitor.VisitUnaryExpression(this);
        }
    }
}


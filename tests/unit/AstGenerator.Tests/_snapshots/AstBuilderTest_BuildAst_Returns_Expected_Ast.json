{
  "AutoGenerated": "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Generator name    : pulse_ast\n//     Generator version : 1.0.0-alpha\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace AstGenerator.Tests.Ast\n{\n  internal abstract class ExpressionTest\n  {\n    public abstract T Accept<T>(IVisitor<T> visitor);\n    \n    public interface IVisitor<out T>\n    {\n      T VisitBinaryExpressionTest(Binary expression);\n      T VisitGroupingExpressionTest(Grouping expression);\n      T VisitLiteralExpressionTest(Literal expression);\n      T VisitUnaryExpressionTest(Unary expression);\n    }\n    public sealed class Binary : ExpressionTest\n    {\n      public Expression Left { get; }\n      public Token Operator { get; }\n      public Expression Right { get; }\n      \n      public Binary(Expression left,Token @operator,Expression right)\n      {\n        Left = left;\n        Operator = @operator;\n        Right = right;\n      }\n      \n      public override T Accept<T>(IVisitor<T> visitor)\n        => visitor.VisitBinaryExpressionTest(this);\n    }\n    public sealed class Grouping : ExpressionTest\n    {\n      public Expression Expression { get; }\n      \n      public Grouping(Expression expression)\n      {\n        Expression = expression;\n      }\n      \n      public override T Accept<T>(IVisitor<T> visitor)\n        => visitor.VisitGroupingExpressionTest(this);\n    }\n    public sealed class Literal : ExpressionTest\n    {\n      public object Value { get; }\n      \n      public Literal(object value)\n      {\n        Value = value;\n      }\n      \n      public override T Accept<T>(IVisitor<T> visitor)\n        => visitor.VisitLiteralExpressionTest(this);\n    }\n    public sealed class Unary : ExpressionTest\n    {\n      public Token Operator { get; }\n      public Expression Right { get; }\n      \n      public Unary(Token @operator,Expression right)\n      {\n        Operator = @operator;\n        Right = right;\n      }\n      \n      public override T Accept<T>(IVisitor<T> visitor)\n        => visitor.VisitUnaryExpressionTest(this);\n    }\n  }\n}\n\n"
}
{
  "AutoGenerated": "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Generator name    : pulse_ast\n//     Generator version : 1.0.0-alpha\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nnamespace AstGenerator.Tests.Ast\n{\n  public interface IVisitor<out T>\n  {\n    T VisitBinaryExpression(BinaryExpression expression);\n    T VisitGroupingExpression(GroupingExpression expression);\n    T VisitLiteralExpression(LiteralExpression expression);\n    T VisitUnaryExpression(UnaryExpression expression);\n  }\n  public abstract class Expression\n  {\n    public abstract T Accept<T>(IVisitor<T> visitor);\n  }\n  public sealed class BinaryExpression : Expression\n  {\n    public Expression Left { get; }\n    public Token Operator { get; }\n    public Expression Right { get; }\n    \n    public BinaryExpression(Expression left,Token @operator,Expression right)\n    {\n      Left = left;\n      Operator = @operator;\n      Right = right;\n    }\n    \n    public override T Accept<T>(IVisitor<T> visitor)\n      => visitor.VisitBinaryExpression(this);\n  }\n  public sealed class GroupingExpression : Expression\n  {\n    public Expression Expression { get; }\n    \n    public GroupingExpression(Expression expression)\n    {\n      Expression = expression;\n    }\n    \n    public override T Accept<T>(IVisitor<T> visitor)\n      => visitor.VisitGroupingExpression(this);\n  }\n  public sealed class LiteralExpression : Expression\n  {\n    public object Value { get; }\n    \n    public LiteralExpression(object value)\n    {\n      Value = value;\n    }\n    \n    public override T Accept<T>(IVisitor<T> visitor)\n      => visitor.VisitLiteralExpression(this);\n  }\n  public sealed class UnaryExpression : Expression\n  {\n    public Token Operator { get; }\n    public Expression Right { get; }\n    \n    public UnaryExpression(Token @operator,Expression right)\n    {\n      Operator = @operator;\n      Right = right;\n    }\n    \n    public override T Accept<T>(IVisitor<T> visitor)\n      => visitor.VisitUnaryExpression(this);\n  }\n}\n"
}